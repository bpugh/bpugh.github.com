<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Dev Blog]]></title>
  <link href="http://brandonpugh.com/atom.xml" rel="self"/>
  <link href="http://brandonpugh.com/"/>
  <updated>2013-02-26T00:43:28-06:00</updated>
  <id>http://brandonpugh.com/</id>
  <author>
    <name><![CDATA[Brandon Pugh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use jQuery .on() instead of .live()]]></title>
    <link href="http://brandonpugh.com/blog/2012/01/how-to-use-jquery-on-instead-of-live/"/>
    <updated>2012-01-15T15:52:25-06:00</updated>
    <id>http://brandonpugh.com/blog/2012/01/how-to-use-jquery-on-instead-of-live</id>
    <content type="html"><![CDATA[<p>One of the most used features of jQuery is the easy methods it provides to to attach event handlers to dom elements like this simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.submitButton&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">validateForm</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>It doesn&#8217;t get much easier than that. However, a lot of times we&#8217;ll want to attach events to elements that were loaded after the initial page load such as from the result of an ajax request. This is where the .live() method comes in really handy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.submitButton&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">validateForm</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>However if you&#8217;re using jQuery 1.7 and up you now have access to the .on() method which is a very versatile method offering a number of improvements over .live(). <a href="http://bitovi.com/blog/2011/04/why-you-should-never-use-jquery-live.html">This post</a> does a good job of explaining the main issues with using live, all of which you can avoid by using .on().</p>

<p>So how do you go about using .on()? Well .on() basically provides a consistent interface for practically all your event binding needs. You can replace the first example with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.submitButton&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">validateForm</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>and you can obviously replace <code>'click'</code> with whatever event you wish to handle.</p>

<p>Now to replace the previous live() example with .on() requires the tiniest bit more effort. The way .on() works is it will attach the event to the first selector you specify and if you specify a second selector it will look at all the events that bubble up to it and will only execute the event handler for events that came child elements matching the second selector. So we could replace the example with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#userForm&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;.submitButton&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">validateForm</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the submitButton element is a child of the userForm element, the click event from the button will bubble up the dom and when it reaches the form element our event handler will be called. This is how we can dynamically insert as many elements with the calls submitbutton and have them be automatically handled. This is essentially the same thing that .live() accomplishes however it does so by automatically attaching the event handler to the document element which can have performance implications as now our click event would have to bubble all the way up the dom tree to the document before the handler will see it. It would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;document&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s1">&#39;#submitButton&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">validateForm</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s look at one last examle:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#dataTable tr&quot;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a fairly common scenario where <code>#dataTable</code> is populated dynamically by data retrieved asynchronously from the server. Again the issue here is that all the events have to bubble up to the document before they are seen by the handler. We can instead replace this with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#dataTable tbody&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;tr&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">alert</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My thoughts on the Global Day of Coderetreat]]></title>
    <link href="http://brandonpugh.com/blog/2011/12/my-thoughts-on-the-global-day-of-coderetreat/"/>
    <updated>2011-12-09T17:04:00-06:00</updated>
    <id>http://brandonpugh.com/blog/2011/12/my-thoughts-on-the-global-day-of-coderetreat</id>
    <content type="html"><![CDATA[<p>Last weekend I attended the Global Day of Coderetreat in Dallas, TX which was not only my first Coderetreat but also my first time attending a developer community event and I have to say that it was a great and worthwhile experience.</p>

<p>If you&#8217;re unfamiliar with the format of a Coderetreat you can read all about it at <a href="http://coderetreat.com">coderetreat.com</a> but its basically a code kata where you spend most of the day pairing up in 45 min sessions and attempt to solve Conway&#8217;s Game of Life (a fascinating problem by itself). I had only first heard about it a couple weeks before when Corey Haines went on the Herding code podcast to talk about it and I&#8217;m glad I went because I feel took away a few key benefits.</p>

<h2>Getting to know my community</h2>

<p>I hadn&#8217;t realized what a strong development community there was in my city and I met some really cool people who were not only fun to talk to but who I could learn lots of new things from. I found out that there are other regular meet ups such as the <a href="http://twitter.com/#!/dallashackclub">Dallas Hack Club</a> which I plan to start attending. I even found out that there are quite a few other people besides me who still like to use Vim or Vi key mappings!</p>

<h2>The value of TDD</h2>

<p>In school and the places I&#8217;ve worked there hasn&#8217;t been a very strong emphasis on the importance of TDD or even unit testing so I had only ever dabbled in it after reading about in various books and blog posts. After the Coderetreat however, I was sold. The Coderetreat very strongly encourages following TDD practices and pairing up with an experienced unit tester or TDD practitioner is a great way to learn. Its true that you can get addicted to the quick feedback you get from unit tests and the safety in knowing that whenever we went back and refactored one of our methods we didn&#8217;t have to worry that we broke something since the unit tests still passed. One of my partners suggested that I read Michael Feathers book <a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052">Working Effectively with Legacy Code</a> and it is looking to be a great read. The bulk of what I&#8217;m currently doing at work is maintaining existing systems and now I&#8217;m working on incorporating unit tests into my updates.</p>

<h2>Exposure to new languages</h2>

<p>Coderetreat is language agnostic so they encourage pairing up with someone with development experience fairly different from your own which is a great way to see other programming languages in action. I probably spent most of the morning with Ruby guys and it was impressive to see how quickly we could go from a blank project to our first failing test! I also saw some of the cool things you can do with Rake as far as automatically building .net projects and I got some exposure to <a href="http://nspec.org/">NSpec</a>.</p>

<p>So I highly recommend attending a Coderetreat if you get the chance but at the very least get out in your community by attending some local user groups or conferences.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with PetaPoco and Postgres]]></title>
    <link href="http://brandonpugh.com/blog/2011/11/getting-started-with-petapoco-and-postgres/"/>
    <updated>2011-11-30T11:50:00-06:00</updated>
    <id>http://brandonpugh.com/blog/2011/11/getting-started-with-petapoco-and-postgres</id>
    <content type="html"><![CDATA[<p>I&#8217;m currently working on a project I&#8217;ve inherited that uses a Postgres sql backend and I was looking for an easy way to make writing our data access layer less time consuming and painful. My first thought was to use a micro-ORM like <a href="https://github.com/robconery/massive">Massive</a> but while I&#8217;ve heard some really great things about Massive, I felt it might be a tough sell to my team members who aren&#8217;t too comfortable with Expandos and its dynamic nature (I know, but change in baby steps I suppose). Then I came across <a href="http://www.toptensoftware.com/petapoco/">PetaPoco</a> and it seemed to fit the bill. Its basically a mico-ORM like Massive with built in support for Postgres except that it also works with POCOs (Plain old CLR Objects) and was pretty easy to get up and running with.</p>

<p>First if you&#8217;re not already working with Postgres you&#8217;ll need to install a <a href="http://npgsql.projects.postgresql.org/">provider like Npgsql</a>. You can get the assemblies from their site or use Nuget with the command &#8220;Install-Package Npgsql&#8221;. If you were already using Postgres like I was you&#8217;ll have to add a bit more to the web.config/app.config in order to use PetaPoco.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;system.data&gt;</span>
</span><span class='line'>  <span class="nt">&lt;DbProviderFactories&gt;</span>
</span><span class='line'>    <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;Npgsql Data Provider&quot;</span> <span class="na">invariant=</span><span class="s">&quot;Npgsql&quot;</span> <span class="na">support=</span><span class="s">&quot;FF&quot;</span> <span class="na">description=</span><span class="s">&quot;.Net Framework Data Provider for Postgresql Server&quot;</span>
</span><span class='line'>         <span class="na">type=</span><span class="s">&quot;Npgsql.NpgsqlFactory, Npgsql, Version=2.0.11.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/DbProviderFactories&gt;</span>
</span><span class='line'><span class="nt">&lt;/system.data&gt;</span>
</span><span class='line'><span class="nt">&lt;connectionStrings&gt;</span>
</span><span class='line'>  <span class="nt">&lt;add</span> <span class="na">name=</span><span class="s">&quot;Postgres&quot;</span> <span class="na">connectionString=</span><span class="s">&quot;Server=localhost;Port=5432;User Id=testuser;Password=secret;Database=testdb;&quot;</span> <span class="na">providerName=</span><span class="s">&quot;Npgsql&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/connectionStrings&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice you have to add the DbProviderFactories to the system.data section (you can also do this in the machine.config though you may run into issues when you deploy) and be sure to specify that as the providerName in the connection string.</p>

<p>Next install PetaPoco which you can get from Nuget with &#8220;Install-Package PetaPoco&#8221; which installs it in your project with some handy T4 templates for generating pocos from your database schema but all you really need is the single PetaPoco.cs file somewhere in your project and you should be ready to go. <a href="http://www.toptensoftware.com/petapoco/">Check out their site</a> for some great examples to get coding.</p>

<p>Its also worth noting though that if you&#8217;re targeting .Net 3.5 you&#8217;ll need to define <strong>PETAPOCO_NO_DYNAMIC </strong>as a conditional compile symbol in your project settings or it won&#8217;t compile since PetaPoco now also supports dynamics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GhostDoc [Dev tool of the week]]]></title>
    <link href="http://brandonpugh.com/blog/2011/10/ghostdoc-dev-tool-of-the-week/"/>
    <updated>2011-10-19T06:43:00-05:00</updated>
    <id>http://brandonpugh.com/blog/2011/10/ghostdoc-dev-tool-of-the-week</id>
    <content type="html"><![CDATA[<p>Thought I would try to make it a thing where I post about a particular tool I&#8217;m using that makes life easier for me as a developer.</p>

<p><a href="http://submain.com/products/ghostdoc.aspx">GhostDoc</a> is a cool little Visual Studio plugin that makes commenting your methods and properties much easier. With a keyboard shortcut or right clicking on a method name, GhostDoc will automatically generate xml documentation comments by intelligently looking at the method name and parameters:</p>

<p><img src="http://submain.com/images/ghostdoc/GhostDoc_Sample_CSharp_660x340.png" alt="" /></p>

<p>I know how we can all get lazy when it comes to documenting our code especially when we&#8217;re on a time crunch but I&#8217;ve definitely found GhostDoc helps minimize a bit of the friction when it comes to writing documentation comments and your team members will definitely thank you for it.</p>

<p><a href="http://submain.com/products/ghostdoc.aspx">GhostDoc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Allow pasting multiple lines in IE textbox]]></title>
    <link href="http://brandonpugh.com/blog/2011/10/allow-pasting-multiple-lines-in-ie-textbox/"/>
    <updated>2011-10-12T18:21:07-05:00</updated>
    <id>http://brandonpugh.com/blog/2011/10/allow-pasting-multiple-lines-in-ie-textbox</id>
    <content type="html"><![CDATA[<p>You may have noticed before that if you try to paste more than one line of text into a textbox in Internet explorer it will on only paste in the first line and disregard the rest. Firefox and Chrome on the other hand will automatically paste all lines of the text onto the one line of the textbox. This issue came up in one of the projects I&#8217;m currently working on where we wanted users to be able to paste in a list of ID numbers they wanted to run a search on.</p>

<p>I knew it was possible to get it working in IE since I had seen it done with the search box on Google Maps. I figured the way to do it would be to be to capture the text from the clipboard when the user is attempting to paste it into the textbox and reformat the text into a single line. In the end this is what the javascript looked liked:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">clipboardData</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#textboxId&#39;</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;paste&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">clipped</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">clipboardData</span><span class="p">.</span><span class="nx">getData</span><span class="p">(</span><span class="s1">&#39;Text&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">clipped</span> <span class="o">=</span> <span class="nx">clipped</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\r\n|\n|\r)/gm</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span> <span class="c1">//replace newlines with spaces</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">clipped</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">//cancel the pasting event</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To begin with, I&#8217;m using <a href="http://jquery.com">jQuery</a> because it&#8217;s incredibly powerful and it&#8217;s 2011 and if you&#8217;re not using a javascript library then you are missing out. This allows me to bind an event handler for the paste event to the textbox element. Note that the paste event is supported in practically all browsers however for security reasons accessing the clipboard is only supported in IE. Fortunately for this purpose I&#8217;m only interested in Intenet Explorer and we can get the text with window.clipboardData object. Passing &#8216;Text&#8217; into the getData() function is required to return the data as text.</p>

<p>Next calling .replace() on the text to replace all of the newline characters with spaces (or any delimeter we choose). Then we simply set the value of the textbox to the newly formatted text.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">clipped</span> <span class="o">=</span> <span class="nx">clipped</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\r\n|\n|\r)/gm</span><span class="p">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span> <span class="c1">//replace newlines with spaces</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">(</span><span class="nx">clipped</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also don&#8217;t forget to call <em>return false;</em> to prevent the original text from still being pasted in.</p>

<p>Lastly we need to handle what will happen in all other browsers. We only want to attempt to read from clipboardData in IE since it will be undefined in all other browsers. One way to accomplish this is by detecting what browser the user has however this is not recommended. The trend nowadays is to use feature detection and there are entire javascript libraries such as <a href="http://modernizr.com">Modernizr</a> dedicated to detecting which features a browser supports and then degrading gracefully when it doesn&#8217;t. In this case we can simply surround our code with an if statement to ensure our code won&#8217;t cause any errors outside of Internet Explorer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">clipboardData</span><span class="p">){}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you go, overcoming one of Internet Explorer&#8217;s shortcomings with some simple and concise javascript.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My development journal]]></title>
    <link href="http://brandonpugh.com/blog/2011/10/my-development-journal/"/>
    <updated>2011-10-06T01:30:40-05:00</updated>
    <id>http://brandonpugh.com/blog/2011/10/my-development-journal</id>
    <content type="html"><![CDATA[<p>After having just watched one Rob Conery&#8217;s excellent screencasts at Tekpub on going from Coder to Developer, I&#8217;ve finally decided to start my own blog. Rob suggested possibly making it something of a development journal if you&#8217;re learning a new language or technology and being relatively new to the industry and being a lead developer, it feels like I&#8217;m learning so much so fast. So this is my outlet for recording/sharing my experiences, knowledge, trials, triumphs, and mistakes with anyone who might find it interesting or useful.</p>
]]></content>
  </entry>
  
</feed>
