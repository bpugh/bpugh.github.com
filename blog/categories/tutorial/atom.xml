<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | My Dev Blog]]></title>
  <link href="http://bpugh.github.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://bpugh.github.com/"/>
  <updated>2013-01-24T17:39:00-06:00</updated>
  <id>http://bpugh.github.com/</id>
  <author>
    <name><![CDATA[Brandon Pugh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use jQuery .on() instead of .live()]]></title>
    <link href="http://bpugh.github.com/blog/2012/01/15/how-to-use-jquery-on-instead-of-live/"/>
    <updated>2012-01-15T15:52:25-06:00</updated>
    <id>http://bpugh.github.com/blog/2012/01/15/how-to-use-jquery-on-instead-of-live</id>
    <content type="html"><![CDATA[<p>One of the most used features of jQuery is the easy methods it provides to to attach event handlers to dom elements like this simple example:</p>

<p>``` javascript
$('.submitButton').click(function() {</p>

<pre><code>validateForm();
</code></pre>

<p>});
```</p>

<p>It doesn't get much easier than that. However, a lot of times we'll want to attach events to elements that were loaded after the initial page load such as from the result of an ajax request. This is where the .live() method comes in really handy:
``` javascript
$('.submitButton').live('click', function() {</p>

<pre><code>validateForm();
</code></pre>

<p>});
```
However if you're using jQuery 1.7 and up you now have access to the .on() method which is a very versatile method offering a number of improvements over .live(). <a href="http://bitovi.com/blog/2011/04/why-you-should-never-use-jquery-live.html">This post</a> does a good job of explaining the main issues with using live, all of which you can avoid by using .on().</p>

<p>So how do you go about using .on()? Well .on() basically provides a consistent interface for practically all your event binding needs. You can replace the first example with:
``` javascript
$('.submitButton').on('click', function() {</p>

<pre><code>validateForm();
</code></pre>

<p>});
```
and you can obviously replace 'click' with whatever event you wish to handle.</p>

<p>Now to replace the previous live() example with .on() requires the tiniest bit more effort. The way .on() works is it will attach the event to the first selector you specify and if you specify a second selector it will look at all the events that bubble up to it and will only execute the event handler for events that came child elements matching the second selector. So we could replace the example with this:
``` javascript
$('#userForm').on('click', '.submitButton', function() {</p>

<pre><code>validateForm();
</code></pre>

<p>});
<code>
Since the submitButton element is a child of the userForm element, the click event from the button will bubble up the dom and when it reaches the form element our event handler will be called. This is how we can dynamically insert as many elements with the calls submitbutton and have them be automatically handled. This is essentially the same thing that .live() accomplishes however it does so by automatically attaching the event handler to the document element which can have performance implications as now our click event would have to bubble all the way up the dom tree to the document before the handler will see it. It would look like this:
</code> javascript
$('document').on('click', '#submitButton', function() {</p>

<pre><code>validateForm();
</code></pre>

<p>});
<code>
Let's look at one last examle:
</code> javascript
$("#dataTable tr").live("click", function(event){</p>

<pre><code>alert($(this).text());
</code></pre>

<p>});
<code>
This is a fairly common scenario where #dataTable is populated dynamically by data retrieved asynchronously from the server. Again the issue here is that all the events have to bubble up to the document before they are seen by the handler. We can instead replace this with:
</code> javascript
$("#dataTable tbody").on("click", "tr", function(event){</p>

<pre><code>alert($(this).text());
</code></pre>

<p>});
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting started with PetaPoco and Postgres]]></title>
    <link href="http://bpugh.github.com/blog/2011/11/30/getting-started-with-petapoco-and-postgres/"/>
    <updated>2011-11-30T11:50:00-06:00</updated>
    <id>http://bpugh.github.com/blog/2011/11/30/getting-started-with-petapoco-and-postgres</id>
    <content type="html"><![CDATA[<p>I'm currently working on a project I've inherited that uses a Postgres sql backend and I was looking for an easy way to make writing our data access layer less time consuming and painful. My first thought was to use a micro-ORM like <a href="https://github.com/robconery/massive">Massive</a> but while I've heard some really great things about Massive, I felt it might be a tough sell to my team members who aren't too comfortable with Expandos and its dynamic nature (I know, but change in baby steps I suppose). Then I came across <a href="http://www.toptensoftware.com/petapoco/">PetaPoco</a> and it seemed to fit the bill. Its basically a mico-ORM like Massive with built in support for Postgres except that it also works with POCOs (Plain old CLR Objects) and was pretty easy to get up and running with.</p>

<p>First if you're not already working with Postgres you'll need to install a <a href="http://npgsql.projects.postgresql.org/">provider like Npgsql</a>. You can get the assemblies from their site or use Nuget with the command "Install-Package Npgsql". If you were already using Postgres like I was you'll have to add a bit more to the web.config/app.config in order to use PetaPoco.</p>

<p>``` xml
&lt;system.data></p>

<pre><code>&lt;DbProviderFactories&gt;
  &lt;add name="Npgsql Data Provider" invariant="Npgsql" support="FF" description=".Net Framework Data Provider for Postgresql Server"
       type="Npgsql.NpgsqlFactory, Npgsql, Version=2.0.11.0, Culture=neutral, PublicKeyToken=5d8b90d52f46fda7" /&gt;
&lt;/DbProviderFactories&gt;
</code></pre>

<p>&lt;/system.data>
<connectionStrings></p>

<pre><code>&lt;add name="Postgres" connectionString="Server=localhost;Port=5432;User Id=testuser;Password=secret;Database=testdb;" providerName="Npgsql"/&gt;
</code></pre>

<p></connectionStrings>
```</p>

<p>Notice you have to add the DbProviderFactories to the system.data section (you can also do this in the machine.config though you may run into issues when you deploy) and be sure to specify that as the providerName in the connection string.</p>

<p>Next install PetaPoco which you can get from Nuget with "Install-Package PetaPoco" which installs it in your project with some handy T4 templates for generating pocos from your database schema but all you really need is the single PetaPoco.cs file somewhere in your project and you should be ready to go. <a href="http://www.toptensoftware.com/petapoco/">Check out their site</a> for some great examples to get coding.</p>

<p>Its also worth noting though that if you're targeting .Net 3.5 you'll need to define <strong>PETAPOCO_NO_DYNAMIC </strong>as a conditional compile symbol in your project settings or it won't compile since PetaPoco now also supports dynamics.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Allow pasting multiple lines in IE textbox]]></title>
    <link href="http://bpugh.github.com/blog/2011/10/12/allow-pasting-multiple-lines-in-ie-textbox/"/>
    <updated>2011-10-12T18:21:07-05:00</updated>
    <id>http://bpugh.github.com/blog/2011/10/12/allow-pasting-multiple-lines-in-ie-textbox</id>
    <content type="html"><![CDATA[<p>You may have noticed before that if you try to paste more than one line of text into a textbox in Internet explorer it will on only paste in the first line and disregard the rest. Firefox and Chrome on the other hand will automatically paste all lines of the text onto the one line of the textbox. This issue came up in one of the projects I'm currently working on where we wanted users to be able to paste in a list of ID numbers they wanted to run a search on.</p>

<p>I knew it was possible to get it working in IE since I had seen it done with the search box on Google Maps. I figured the way to do it would be to be to capture the text from the clipboard when the user is attempting to paste it into the textbox and reformat the text into a single line. In the end this is what the javascript looked liked:
``` javascript
if (window.clipboardData) {</p>

<pre><code>    $('#textboxId').bind('paste', function (e) {
        var clipped = window.clipboardData.getData('Text');
        clipped = clipped.replace(/(\r\n|\n|\r)/gm, " "); //replace newlines with spaces
        $(this).val(clipped);
        return false; //cancel the pasting event
    });
}
</code></pre>

<p>```</p>

<p>To begin with, I'm using <a href="http://jquery.com">jQuery</a> because it's incredibly powerful and it's 2011 and if you're not using a javascript library then you are missing out. This allows me to bind an event handler for the paste event to the textbox element. Note that the paste event is supported in practically all browsers however for security reasons accessing the clipboard is only supported in IE. Fortunately for this purpose I'm only interested in Intenet Explorer and we can get the text with window.clipboardData object. Passing 'Text' into the getData() function is required to return the data as text.</p>

<p>Next calling .replace() on the text to replace all of the newline characters with spaces (or any delimeter we choose). Then we simply set the value of the textbox to the newly formatted text.
<code>javascript
clipped = clipped.replace(/(\r\n|\n|\r)/gm, " "); //replace newlines with spaces
$(this).val(clipped);
</code>
Also don't forget to call <em>return false;</em> to prevent the original text from still being pasted in.</p>

<p>Lastly we need to handle what will happen in all other browsers. We only want to attempt to read from clipboardData in IE since it will be undefined in all other browsers. One way to accomplish this is by detecting what browser the user has however this is not recommended. The trend nowadays is to use feature detection and there are entire javascript libraries such as <a href="http://modernizr.com">Modernizr</a> dedicated to detecting which features a browser supports and then degrading gracefully when it doesn't. In this case we can simply surround our code with an if statement to ensure our code won't cause any errors outside of Internet Explorer.</p>

<p><code>javascript
if (window.clipboardData){}
</code>
And there you go, overcoming one of Internet Explorer's shortcomings with some simple and concise javascript.</p>
]]></content>
  </entry>
  
</feed>
